// src/service-worker.js

/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// eslint-disable-next-line no-underscore-dangle
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL || ''}/index.html`),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  console.log('[Service Worker] Message Event: ', event.data);
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

/* NOTIFICATIONS */
/* Listen for incoming Push events */
self.addEventListener('push', event => {
  console.log('[Service Worker] Push Received: ', event.data);

  if (!(self.Notification && self.Notification.permission === 'granted')) return;

  let data = {};
  if (event.data) {
    data = event.data.json();
  }

  const { title } = data;
  const { message } = data;
  const options = {
    body: message,
    vibrate: [100, 50, 100],
  };
  event.waitUntil(self.registration.showNotification(title, options));
});

/* Handle a notification click */
self.addEventListener('notificationclick', event => {
  console.log('[Service Worker] Notification click: ', event);
  if (event.action !== '') {
    console.log('[Service Worker] Notification action: ', event.action);
    event.waitUntil(
      (async () => {
        const clients = await self.clients.matchAll({ type: 'window' });
        console.log(clients);
        // eslint-disable-next-line no-restricted-syntax
        for (const client of clients) {
          console.log(`[Service Worker] Sending message to client: ${client}, `, {
            action: event.action,
          });
          client.postMessage({
            action: event.action,
          });
        }
      })(),
    );
  }

  event.notification.close();
});

/* Handle a notification close */
self.addEventListener('notificationclose', event => {
  console.log('[Service Worker] Notification close: ', event);
});
